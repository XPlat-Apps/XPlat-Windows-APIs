trigger:
  branches:
    include:
    - main
    - preview/*
    - release/*
  paths:
    include:
    - build/*
    - src/*
    - tests/*
    - XPlat.sln

pr:
  branches:
    include:
    - main
    - preview/*
    - release/*
  paths:
    include:
    - build/*
    - src/*
    - tests/*
    - XPlat.sln

variables:
  - name: vmImageName
    value: 'windows-2019'

stages:
- stage: 'Build'
  variables:
    solution: '**/*.sln'
    buildConfiguration: 'Release'
  jobs:
  - job:
    pool:
      vmImage: $(vmImageName)
    timeoutInMinutes: 120

    workspace:
      clean: all

    steps:
    - task: UseDotNet@2
      displayName: Use latest dotnet 3.x
      inputs:
        packageType: 'sdk'
        version: '3.x'

    - task: NuGetToolInstaller@1
      displayName: Use NuGet 5.6.0
      inputs:
        versionSpec: '5.6.0'

    - powershell: |
        Import-Module $(Build.SourcesDirectory)/build/SetBuildVersion.ps1
        $version = SetBuildVersion -VersionString $(Build.SourceBranchName)
        Write-Host "Build version: $version"
        Write-Host "##vso[task.setvariable variable=VERSION_NUMBER;]$($version)"
      displayName: Get build version

    - task: NuGetCommand@2
      displayName: Restore NuGet packages
      inputs:
        command: 'restore'
        restoreSolution: '$(solution)'

    - task: MSBuild@1
      inputs:
        solution: '$(solution)'
        platform: 'Any CPU'
        configuration: '$(buildConfiguration)'
        msbuildArguments: '-p:Version=$(VERSION_NUMBER)'
        maximumCpuCount: true

    - task: DotNetCoreCLI@2
      displayName: Run tests
      inputs:
        command: 'test'
        arguments: '/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
        projects: 'tests/**/*Tests*.csproj'
        testRunTitle: 'Automated Tests'

    # - task: reportgenerator@4
    #   displayName: Generate code coverage report
    #   inputs:
    #     reports: '$(Build.SourcesDirectory)/**/*.cobertura.xml'
    #     targetdir: '$(Build.SourcesDirectory)/CoverageResults'

    - task: CopyFiles@2
      displayName: Copy NuGet packages to artifacts
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/src'
        Contents: |
          **/[Rr]elease/**/*.nupkg
          **/[Rr]elease/**/*.snupkg
        TargetFolder: '$(Build.ArtifactStagingDirectory)/artifacts'

    - publish: '$(Build.ArtifactStagingDirectory)/artifacts'
      artifact: 'artifacts'

- stage: 'Publish'
  dependsOn: 'Build'
  condition: and(succeeded(), or(startsWith(variables['Build.SourceBranch'], 'refs/heads/preview/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
  jobs:
    - job:
      pool:
        vmImage: $(vmImageName)
      timeoutInMinutes: 120

      steps:
      - checkout: none

      - download: current
        artifact: 'artifacts'

      - task: NuGetCommand@2
        displayName: Deploy NuGet packages to nuget.org
        inputs:
          command: 'push'
          packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg'
          nuGetFeedType: 'external'
          publishFeedCredentials: 'NuGet - JamesCroft'
