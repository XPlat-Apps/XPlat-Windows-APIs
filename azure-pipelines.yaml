name: $(Major).$(Minor).$(Year:yy)$(DayOfYear).$(Rev:r)$(PreRelease)

trigger:
  branches:
    include:
    - develop

pr:
  branches:
    include:
    - develop

stages:

- stage: 'Build'
  variables:
    solution: '**/*.sln'
    buildConfiguration: 'Release'

  jobs:
  - job:
    pool:
      vmImage: 'windows-latest'

    workspace:
      clean: all

    steps:
    - task: NuGetToolInstaller@1
      inputs:
        versionSpec: '5.4.0'
    
    - task: NuGetCommand@2
      inputs:
        command: 'restore'
        restoreSolution: '$(solution)'

    - task: VersionDotNetCoreAssemblies@2
      inputs:
        Path: '$(Build.SourcesDirectory)'
        VersionNumber: '$(Build.BuildNumber)'
        Injectversion: False
        VersionRegex: '\d+\.\d+\.\d+\.\d+(\-[a-z]+)?'
        FilenamePattern: '.csproj'
        SDKNames: 'Microsoft.NET.Sdk,MSBuild.Sdk.Extras'
        OutputVersion: 'OutputedVersion'

    - task: MSBuild@1
      inputs:
        solution: '$(solution)'
        platform: 'Any CPU'
        configuration: $(buildConfiguration)
        maximumCpuCount: true

    - task: DotNetCoreCLI@2
      inputs:
        command: test
        projects: '**/*[Tt]ests/*.csproj'
        arguments: '--configuration $(buildConfiguration) --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput="$(Build.SourcesDirectory)/TestResults/Coverage"'

    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/src'
        Contents: |
          **/*.nupkg
          **/*.snupkg
        TargetFolder: '$(Build.ArtifactStagingDirectory)/artifacts'

    - publish: '$(Build.ArtifactStagingDirectory)/artifacts'
      artifact: 'artifacts'

- stage: 'InternalPublish'
  dependsOn: 'Build'
  condition: succeeded()
  jobs:
    - job:
      pool:
        vmImage: 'windows-latest'
      
      steps:
      - checkout: none

      - download: current
        artifact: 'artifacts'

      - task: NuGetCommand@2
        inputs:
          command: 'push'
          packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg'
          nuGetFeedType: 'internal'
          publishVstsFeed: 'NuGet-PreRelease'

- stage: 'NuGetPublish'
  dependsOn: 'InternalPublish'
  condition: and(succeeded(), and(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), ne(variables['Build.Reason'], 'PullRequest')))
  jobs:
    - job:
      pool:
        vmImage: 'windows-latest'

      steps:
      - checkout: none

      - download: current
        artifact: 'artifacts'

      - task: NuGetCommand@2
        inputs:
          command: 'push'
          packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg'
          nuGetFeedType: 'external'
          publishFeedCredentials: 'NuGet - JamesCroft'

      - task: NuGetCommand@2
        inputs:
          command: 'push'
          packagesToPush: '$(Pipeline.Workspace)/**/*.snupkg'
          nuGetFeedType: 'external'
          publishFeedCredentials: 'NuGet - JamesCroft'